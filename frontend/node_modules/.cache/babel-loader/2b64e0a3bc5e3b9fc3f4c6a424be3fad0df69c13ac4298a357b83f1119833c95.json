{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useTripsContext } from '../contexts/TripsContext';\nimport { tripAPI } from '../services/api';\n\n// Type definitions for API operations\n\nexport const useTrips = () => {\n  _s();\n  const {\n    state,\n    dispatch\n  } = useTripsContext();\n\n  // Fetch all trips\n  const fetchTrips = useCallback(async () => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await tripAPI.getTrips();\n      dispatch({\n        type: 'SET_TRIPS',\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to fetch trips'\n      });\n      console.error('Error fetching trips:', error);\n    }\n  }, [dispatch]);\n\n  // Create a new trip\n  const createTrip = useCallback(async tripData => {\n    dispatch({\n      type: 'SET_LOADING',\n      payload: true\n    });\n    try {\n      const response = await tripAPI.createTrip(tripData);\n      dispatch({\n        type: 'ADD_TRIP',\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to create trip'\n      });\n      console.error('Error creating trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Update an existing trip\n  const updateTrip = useCallback(async (id, tripData) => {\n    try {\n      const response = await tripAPI.updateTrip(id, tripData);\n      dispatch({\n        type: 'UPDATE_TRIP',\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to update trip'\n      });\n      console.error('Error updating trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Delete a trip\n  const deleteTrip = useCallback(async id => {\n    try {\n      await tripAPI.deleteTrip(id);\n      dispatch({\n        type: 'DELETE_TRIP',\n        payload: id\n      });\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: 'Failed to delete trip'\n      });\n      console.error('Error deleting trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Select a trip (for detailed view)\n  const selectTrip = useCallback(trip => {\n    dispatch({\n      type: 'SELECT_TRIP',\n      payload: trip\n    });\n  }, [dispatch]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    dispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n  }, [dispatch]);\n\n  // Helper functions\n  const getTripsByStatus = useCallback(status => {\n    return state.trips.filter(trip => trip.status === status);\n  }, [state.trips]);\n  const getUpcomingTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips.filter(trip => new Date(trip.startDate) > now).sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n  }, [state.trips]);\n  const getCurrentTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips.filter(trip => {\n      const startDate = new Date(trip.startDate);\n      const endDate = new Date(trip.endDate);\n      return startDate <= now && endDate >= now;\n    });\n  }, [state.trips]);\n  const getPastTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips.filter(trip => new Date(trip.endDate) < now).sort((a, b) => new Date(b.endDate).getTime() - new Date(a.endDate).getTime());\n  }, [state.trips]);\n  return {\n    // State\n    trips: state.trips,\n    loading: state.loading,\n    error: state.error,\n    selectedTrip: state.selectedTrip,\n    // Actions\n    fetchTrips,\n    createTrip,\n    updateTrip,\n    deleteTrip,\n    selectTrip,\n    clearError,\n    // Helper functions\n    getTripsByStatus,\n    getUpcomingTrips,\n    getCurrentTrips,\n    getPastTrips\n  };\n};\n_s(useTrips, \"Pm4PK+aqf9492A4ysDL9x1vSso4=\", false, function () {\n  return [useTripsContext];\n});","map":{"version":3,"names":["useCallback","useTripsContext","tripAPI","useTrips","_s","state","dispatch","fetchTrips","type","payload","response","getTrips","data","error","console","createTrip","tripData","updateTrip","id","deleteTrip","selectTrip","trip","clearError","getTripsByStatus","status","trips","filter","getUpcomingTrips","now","Date","startDate","sort","a","b","getTime","getCurrentTrips","endDate","getPastTrips","loading","selectedTrip"],"sources":["/Users/loumeziere/Documents/GitHub/TripMate/frontend/src/hooks/useTrips.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useTripsContext } from '../contexts/TripsContext';\nimport { tripAPI, Trip } from '../services/api';\n\n// Type definitions for API operations\ntype CreateTripData = Omit<Trip, 'id' | 'createdAt' | 'updatedAt' | 'status'>;\ntype UpdateTripData = Partial<Trip>;\n\nexport const useTrips = () => {\n  const { state, dispatch } = useTripsContext();\n\n  // Fetch all trips\n  const fetchTrips = useCallback(async () => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await tripAPI.getTrips();\n      dispatch({ type: 'SET_TRIPS', payload: response.data });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to fetch trips' });\n      console.error('Error fetching trips:', error);\n    }\n  }, [dispatch]);\n\n  // Create a new trip\n  const createTrip = useCallback(async (tripData: CreateTripData) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    try {\n      const response = await tripAPI.createTrip(tripData);\n      dispatch({ type: 'ADD_TRIP', payload: response.data });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to create trip' });\n      console.error('Error creating trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Update an existing trip\n  const updateTrip = useCallback(async (id: string, tripData: UpdateTripData) => {\n    try {\n      const response = await tripAPI.updateTrip(id, tripData);\n      dispatch({ type: 'UPDATE_TRIP', payload: response.data });\n      return response.data;\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to update trip' });\n      console.error('Error updating trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Delete a trip\n  const deleteTrip = useCallback(async (id: string) => {\n    try {\n      await tripAPI.deleteTrip(id);\n      dispatch({ type: 'DELETE_TRIP', payload: id });\n    } catch (error) {\n      dispatch({ type: 'SET_ERROR', payload: 'Failed to delete trip' });\n      console.error('Error deleting trip:', error);\n      throw error;\n    }\n  }, [dispatch]);\n\n  // Select a trip (for detailed view)\n  const selectTrip = useCallback((trip: Trip | null) => {\n    dispatch({ type: 'SELECT_TRIP', payload: trip });\n  }, [dispatch]);\n\n  // Clear error\n  const clearError = useCallback(() => {\n    dispatch({ type: 'SET_ERROR', payload: null });\n  }, [dispatch]);\n\n  // Helper functions\n  const getTripsByStatus = useCallback((status: 'planned' | 'active' | 'completed') => {\n    return state.trips.filter(trip => trip.status === status);\n  }, [state.trips]);\n\n  const getUpcomingTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips\n      .filter(trip => new Date(trip.startDate) > now)\n      .sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n  }, [state.trips]);\n\n  const getCurrentTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips.filter(trip => {\n      const startDate = new Date(trip.startDate);\n      const endDate = new Date(trip.endDate);\n      return startDate <= now && endDate >= now;\n    });\n  }, [state.trips]);\n\n  const getPastTrips = useCallback(() => {\n    const now = new Date();\n    return state.trips\n      .filter(trip => new Date(trip.endDate) < now)\n      .sort((a, b) => new Date(b.endDate).getTime() - new Date(a.endDate).getTime());\n  }, [state.trips]);\n\n  return {\n    // State\n    trips: state.trips,\n    loading: state.loading,\n    error: state.error,\n    selectedTrip: state.selectedTrip,\n    \n    // Actions\n    fetchTrips,\n    createTrip,\n    updateTrip,\n    deleteTrip,\n    selectTrip,\n    clearError,\n    \n    // Helper functions\n    getTripsByStatus,\n    getUpcomingTrips,\n    getCurrentTrips,\n    getPastTrips,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}