{"ast":null,"code":"import axios from 'axios';\n\n// API base configuration\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3001/api',\n  timeout: 10000\n});\n\n// Request interceptor for debugging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üöÄ API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error(`‚ùå API Error: ${(_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status} ${(_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url}`, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  return Promise.reject(error);\n});\n// Trip API functions\nexport const tripAPI = {\n  // Get all trips\n  getTrips: async () => {\n    const response = await api.get('/trips');\n    return response.data;\n  },\n  // Get specific trip\n  getTrip: async id => {\n    const response = await api.get(`/trips/${id}`);\n    return response.data;\n  },\n  // Create new trip\n  createTrip: async tripData => {\n    const response = await api.post('/trips', tripData);\n    return response.data;\n  },\n  // Update trip\n  updateTrip: async (id, tripData) => {\n    const response = await api.put(`/trips/${id}`, tripData);\n    return response.data;\n  },\n  // Delete trip\n  deleteTrip: async id => {\n    const response = await api.delete(`/trips/${id}`);\n    return response.data;\n  },\n  // Generate trip from user input\n  generateTrip: async (userInput, useRealGeneration = false) => {\n    const response = await api.post('/generate-trip', {\n      userInput,\n      useRealGeneration\n    });\n    return response.data;\n  }\n};\n\n// Chat API functions\nexport const chatAPI = {\n  // Send chat message\n  sendMessage: async (message, tripId, useRealAI = false) => {\n    const response = await api.post('/chat', {\n      message,\n      tripId,\n      useRealAI\n    });\n    return response.data;\n  },\n  // Get chat history\n  getChatHistory: async tripId => {\n    const response = await api.get(`/chat/${tripId}`);\n    return response.data;\n  },\n  // Clear chat history\n  clearChatHistory: async tripId => {\n    const response = await api.delete(`/chat/${tripId}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","data","Promise","reject","tripAPI","getTrips","get","getTrip","id","createTrip","tripData","post","updateTrip","put","deleteTrip","delete","generateTrip","userInput","useRealGeneration","chatAPI","sendMessage","message","tripId","useRealAI","getChatHistory","clearChatHistory"],"sources":["/Users/loumeziere/Documents/GitHub/TripMate/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\n// API base configuration\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:3001/api',\n  timeout: 10000,\n});\n\n// Request interceptor for debugging\napi.interceptors.request.use((config) => {\n  console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error(`‚ùå API Error: ${error.response?.status} ${error.config?.url}`, error.response?.data);\n    return Promise.reject(error);\n  }\n);\n\nexport interface Trip {\n  id: string;\n  title: string;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  travelers: number;\n  budget: 'low' | 'medium' | 'high';\n  pace: 'relaxed' | 'moderate' | 'active';\n  categories: string[];\n  status: 'planned' | 'active' | 'completed';\n  createdAt: string;\n  updatedAt: string;\n  itinerary: {\n    day: number;\n    activities: {\n      name: string;\n      category: string;\n      duration: string;\n      address: string;\n      rating: number;\n      description?: string;\n    }[];\n  }[];\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message: string;\n}\n\n// Trip API functions\nexport const tripAPI = {\n  // Get all trips\n  getTrips: async (): Promise<ApiResponse<Trip[]>> => {\n    const response = await api.get('/trips');\n    return response.data;\n  },\n\n  // Get specific trip\n  getTrip: async (id: string): Promise<ApiResponse<Trip>> => {\n    const response = await api.get(`/trips/${id}`);\n    return response.data;\n  },\n\n  // Create new trip\n  createTrip: async (tripData: Omit<Trip, 'id' | 'createdAt' | 'updatedAt' | 'status'>): Promise<ApiResponse<Trip>> => {\n    const response = await api.post('/trips', tripData);\n    return response.data;\n  },\n\n  // Update trip\n  updateTrip: async (id: string, tripData: Partial<Trip>): Promise<ApiResponse<Trip>> => {\n    const response = await api.put(`/trips/${id}`, tripData);\n    return response.data;\n  },\n\n  // Delete trip\n  deleteTrip: async (id: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete(`/trips/${id}`);\n    return response.data;\n  },\n\n  // Generate trip from user input\n  generateTrip: async (userInput: string, useRealGeneration = false): Promise<ApiResponse<any>> => {\n    const response = await api.post('/generate-trip', { userInput, useRealGeneration });\n    return response.data;\n  }\n};\n\n// Chat API functions\nexport const chatAPI = {\n  // Send chat message\n  sendMessage: async (message: string, tripId?: string, useRealAI = false): Promise<ApiResponse<any>> => {\n    const response = await api.post('/chat', { message, tripId, useRealAI });\n    return response.data;\n  },\n\n  // Get chat history\n  getChatHistory: async (tripId: string): Promise<ApiResponse<any[]>> => {\n    const response = await api.get(`/chat/${tripId}`);\n    return response.data;\n  },\n\n  // Clear chat history\n  clearChatHistory: async (tripId: string): Promise<ApiResponse<null>> => {\n    const response = await api.delete(`/chat/${tripId}`);\n    return response.data;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}